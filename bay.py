from tkinter import *
from time import time, sleep
from threading import Thread
from keras.layers import Flatten, Dense, Activation
from keras.models import Sequential
import numpy as np
import matplotlib.pyplot as plt

#cumu={'SF':23743, 'SM':24589, 'SCz': 8909, 'SC':71755, 'A':52496, 'M':9902, 'CC':41599, 'N':5802, 'S':19129, 'SN':19216}
#cumu={'SF':12457, 'SM':11371, 'SCz': 2895, 'SC':25139, 'A':24015, 'M':7155, 'CC':19161, 'N': 2041, 'S':9686, 'SN':7639}
cumu={'SF':0, 'SM':0, 'SCz': 0, 'SC':0, 'A':0, 'M':0, 'CC':0, 'N': 0, 'S':0, 'SN':0}

c=list()

SF=[0, 54, 46, 45, 67, 87, 107, 120, 101, 58, 71, 98, 96, 112, 149, 92, 90, 105, 105, 194, 76, 118, 97, 120, 212, 179, 103, 221, 73, 121, 68, 158, 261, 178, 263, 287, 321, 113, 164, 244, 317, 301, 167, 273, 218, 379, 341, 315, 376, 328, 294, 149, 146, 266, 332, 300, 189, 195, 212, 270, 228, 516, 405, 269, 174, 165, 236, 435, 461, 493, 330, 346, 210, 267, 332, 337, 374, 279, 286, 182, 181, 163, 136, 226, 281, 251, 175, 140, 208, 111, 101, 133, 136, 140, 85, 195, 133, 113, 208, 172, 70, 103, 173, 121, 103, 112, 83, 80, 37, 67, 92, 96, 74, 71, 56, 47, 67, 77, 75, 47, 31, 27, 69, 56, 37, 46, 34, 34, 40, 20, 34, 34, 36, 26, 26, 10, 13, 40, 31, 32, 32, 44, 28, 31, 32, 51, 32, 58, 42, 5, 34, 22, 39, 65, 37, 37, 13, 34, 46, 39, 59, 58, 41, 26, 28, 29, 49, 46, 39, 41, 21, 23, 77, 24, 34, 33, 25, 20, 28, 24, 30, 41, 43, 26, 16, 12, 27, 22, 17, 26, 27, 14, 24, 13, 21, 30, 24, 13, 8, 2, 17, 25, 19, 27, 21]
SM=[0, 80, 28, 85, 65, 81, 100, 0, 127, 112, 78, 0, 205, 133, 0, 100, 119, 96, 98, 110, 215, 0, 131, 227, 146, 0, 8, 433, 0, 310, 156, 198, 228, 177, 251, 44, 589, 270, 295, 218, 292, 548, 0, 860, 291, 455, 315, 444, 390, 0, 681, 398, 355, 328, 0, 327, 340, 773, 235, 330, 343, 0, 452, 442, 284, 383, 347, 553, 444, 578, 440, 460, 383, 392, 449, 498, 597, 514, 381, 410, 291, 320, 261, 263, 0, 563, 216, 228, 220, 277, 231, 0, 416, 170, 162, 237, 148, 90, 135, 234, 81, 138, 160, 111, 73, 124, 114, 110, 72, 83, 105, 27, 115, 77, 104, 110, 101, 109, 50, 76, 61, 37, 52, 41, 36, 80, 79, 52, 56, 43, 36, 19, 48, 51, 55, 21, 41, 32, 36, 19, 65, 30, 36, 8, 51, 64, 52, 65, 41, 52, 28, 39, 38, 80, 18, 35, 23, 31, 59, 46, 46, 78, 23, 19, 35, 60, 35, 57, 50, 44, 25, 25, 67, 27, 41, 38, 41, 8, 17, 24, 40, 45, 34, 39, 33, 19, 47, 47, 42, 27, 32, 23, 59, 53, 21, 18, 18, 4, 20, 16, 27, 26, 11, 55, 30]
SCz=[0, 69, 10, 33, 24, 43, 0, 27, 120, 6, 0, 102, 27, 0, 46, 140, 15, 71, 57, 134, 0, 79, 89, 105, 106, 4, 67, 155, 2, 103, 81, 86, 70, 84, 135, 12, 160, 19, 212, 139, 118, 119, 141, 98, 140, 218, 175, 153, 149, 216, 124, 137, 156, 166, 219, 162, 95, 121, 76, 182, 257, 160, 237, 194, 239, 121, 191, 217, 120, 258, 231, 234, 142, 182, 172, 268, 61, 250, 170, 102, 163, 72, 116, 38, 84, 238, 79, 59, 88, 86, 0, 62, 223, 42, 35, 107, 0, 125, 0, 96, 44, 37, 71, 69, 0, 0, 0, 112, 15, 35, 44, 0, 0, 57, 21, 45, 27, 40, 0, 0, 43, 29, 36, 24, 30, 0, 0, 73, 45, 29, 45, 41, 0, 0, 57, 21, 36, 32, 27, 0, 0, 29, 15, 18, 6, 42, 0, 0, 48, 9, 0, 0, 0, 0, 0, 116, 17, 19, 18, 33, 0, 26, 34, 38, 34, 29, 59, 0, 17, 44, 51, 53, 40, 72, 0, 9, 59, 30, 39, 16, 15, 0, 0, 18, 6, 6, 33, 126, 0, 0, 50, 8, 3, 15, 0, 0, 0, 11, 0, 0, 116, 0, 0, 0, 14]
SC=[0, 138, 144, 122, 162, 178, 254, 353, 257, 225, 152, 175, 349, 329, 330, 379, 337, 274, 334, 394, 386, 265, 427, 500, 446, 405, 531, 747, 560, 793, 372, 488, 728, 844, 871, 805, 1431, 692, 1685, 1038, 1139, 808, 2029, 1201, 1099, 918, 1181, 1471, 1020, 1429, 1118, 1185, 1286, 1167, 652, 1560, 1672, 1296, 1153, 158, 2298, 1876, 1738, 866, 168, 1708, 1131, 1317, 1783, 1704, 1485, 1071, 1203, 1116, 1334, 1604, 1483, 1159, 932, 809, 539, 1031, 404, 95, 1622, 526, 591, 528, 766, 529, 456, 511, 463, 409, 400, 512, 328, 533, 485, 292, 354, 283, 349, 377, 361, 287, 222, 150, 211, 275, 207, 338, 254, 222, 230, 0, 335, 396, 185, 199, 134, 156, 165, 205, 179, 178, 176, 138, 84, 138, 151, 145, 132, 110, 82, 115, 135, 129, 119, 154, 106, 89, 59, 114, 115, 86, 168, 111, 104, 84, 88, 113, 169, 95, 110, 114, 95, 130, 173, 256, 259, 144, 96, 112, 126, 116, 94, 199, 110, 105, 131, 0, 221, 140, 77, 105, 105, 71, 58, 87, 88, 100, 55, 55, 62, 52, 105, 94, 59, 50, 31, 42, 36, 54, 112, 54, 54, 38, 18, 55, 5, 46, 25, 45, 41]
A=[0, 101, 67, 71, 137, 48, 246, 187, 150, 109, 139, 151, 199, 161, 112, 175, 413, 195, 272, 296, 212, 50, 137, 235, 368, 153, 479, 259, 360, 442, 54, 358, 650, 224, 667, 910, 696, 410, 486, 674, 639, 595, 746, 1191, 1034, 774, 725, 797, 648, 913, 895, 752, 995, 1002, 774, 838, 719, 712, 609, 541, 644, 885, 1043, 1000, 555, 826, 533, 649, 840, 1251, 953, 986, 935, 897, 923, 894, 919, 904, 792, 577, 697, 458, 447, 139, 641, 489, 475, 726, 573, 518, 427, 229, 316, 574, 298, 216, 247, 315, 433, 478, 461, 107, 416, 294, 359, 71, 358, 169, 133, 76, 205, 174, 68, 110, 147, 152, 140, 191, 217, 172, 109, 96, 77, 136, 82, 87, 90, 88, 140, 85, 89, 119, 103, 65, 82, 52, 91, 109, 92, 80, 74, 70, 64, 70, 53, 74, 98, 126, 74, 95, 57, 80, 99, 202, 85, 90, 56, 84, 39, 83, 235, 178, 130, 61, 104, 88, 80, 167, 111, 114, 102, 69, 110, 67, 106, 81, 146, 68, 71, 89, 100, 112, 102, 80, 542, 46, 35, 78, 100, 48, 4, 96, 144, 63, 87, 0, 121, 9, 50, 99, 102, 75, 19, 43, 0]
M=[0, 12, 14, 16, 8, 28, 8, 13, 16, 14, 10, 31, 19, 14, 20, 31, 39, 19, 22, 17, 12, 42, 36, 26, 7, 41, 32, 51, 22, 33, 32, 33, 22, 71, 54, 47, 38, 90, 57, 62, 48, 49, 80, 47, 78, 136, 51, 48, 51, 118, 112, 73, 101, 54, 89, 56, 64, 47, 47, 67, 70, 102, 122, 97, 0, 165, 60, 122, 120, 108, 114, 118, 114, 84, 88, 0, 249, 106, 58, 64, 35, 82, 91, 34, 20, 59, 52, 49, 42, 68, 59, 62, 47, 44, 26, 39, 25, 48, 52, 40, 20, 32, 28, 31, 38, 37, 27, 26, 22, 49, 14, 24, 26, 23, 23, 24, 29, 23, 24, 43, 18, 9, 25, 30, 24, 35, 14, 24, 15, 7, 13, 8, 19, 16, 14, 3, 11, 9, 7, 6, 29, 25, 6, 13, 12, 12, 15, 26, 15, 6, 11, 13, 11, 14, 9, 5, 3, 9, 13, 16, 17, 10, 10, 10, 9, 8, 15, 5, 9, 4, 3, 3, 15, 10, 6, 9, 5, 3, 6, 11, 18, 11, 7, 15, 10, 8, 15, 6, 12, 6, 5, 2, 6, 10, 7, 6, 2, 3, 6, 5, 7, 3, 6, 1, 5]
CC=[0, 85, 93, 77, 56, 184, 88, 155, 132, 162, 133, 126, 167, 180, 176, 483, 172, 128, 201, 232, 221, 70, 265, 399, 235, 190, 0, 324, 380, 200, 439, 350, 324, 180, 587, 348, 752, 633, 303, 96, 637, 475, 161, 925, 831, 1010, 546, 641, 503, 702, 404, 466, 525, 439, 858, 528, 420, 471, 362, 345, 961, 902, 4, 1025, 4, 591, 1051, 693, 907, 744, 697, 625, 509, 633, 677, 868, 946, 573, 401, 418, 384, 495, 296, 276, 535, 294, 348, 242, 417, 323, 446, 316, 243, 232, 209, 227, 214, 377, 268, 206, 272, 166, 144, 247, 223, 172, 173, 124, 162, 138, 150, 185, 159, 116, 121, 163, 136, 203, 140, 138, 75, 98, 113, 122, 89, 155, 103, 93, 74, 59, 86, 118, 0, 226, 40, 107, 77, 78, 96, 119, 69, 53, 57, 49, 68, 92, 104, 75, 90, 73, 67, 65, 124, 39, 70, 50, 117, 47, 85, 151, 144, 107, 73, 125, 99, 84, 89, 88, 92, 82, 56, 66, 77, 135, 57, 95, 83, 76, 70, 64, 77, 94, 64, 52, 45, 67, 80, 78, 66, 79, 56, 51, 52, 62, 68, 71, 34, 26, 33, 85, 77, 48, 43, 69, 35]
N=[0, 35, 33, 22, 19, 32, 8, 53, 57, 32, 10, 44, 47, 8, 33, 48, 32, 37, 33, 72, 23, 39, 30, 97, 47, 14, 43, 0, 45, 57, 5, 131, 72, 90, 44, 133, 85, 83, 80, 122, 78, 41, 59, 134, 136, 72, 89, 102, 42, 84, 93, 100, 126, 81, 93, 86, 76, 69, 119, 49, 77, 60, 98, 95, 100, 104, 84, 60, 134, 68, 50, 107, 179, 62, 97, 118, 74, 125, 165, 80, 71, 59, 43, 54, 65, 112, 65, 75, 42, 46, 43, 66, 62, 45, 56, 29, 39, 25, 41, 62, 18, 30, 20, 8, 8, 24, 17, 11, 17, 11, 12, 22, 11, 19, 21, 17, 9, 22, 16, 24, 15, 3, 24, 10, 4, 15, 20, 8, 9, 9, 10, 8, 7, 10, 4, 2, 13, 24, 14, 9, 18, 8, 14, 9, 16, 15, 13, 11, 24, 10, 0, 21, 38, 0, 20, 26, 17, 11, 29, 13, 5, 5, 28, 21, 18, 9, 9, 0, 12, 8, 6, 31, 16, 7, 18, 4, 6, 7, 5, 3, 12, 3, 8, 5, 10, 9, 9, 10, 6, 4, 4, 3, 10, 0, 7, 6, 4, 4, 3, 11, 1, 7, 0, 5, 5]
S=[0, 180, 87, 88, 75, 54, 78, 0, 176, 81, 101, 73, 0, 166, 125, 85, 78, 36, 147, 47, 65, 58, 122, 0, 238, 0, 203, 0, 149, 121, 343, 133, 128, 175, 0, 271, 70, 280, 193, 256, 114, 193, 230, 154, 237, 606, 322, 0, 471, 211, 96, 273, 369, 0, 459, 244, 392, 110, 223, 0, 183, 74, 384, 248, 254, 195, 291, 251, 315, 197, 129, 532, 266, 340, 309, 249, 115, 403, 264, 197, 116, 285, 102, 190, 174, 206, 19, 376, 142, 147, 167, 116, 81, 61, 56, 124, 165, 79, 162, 73, 30, 32, 85, 77, 10, 106, 112, 0, 53, 0, 128, 64, 97, 90, 52, 37, 72, 50, 59, 78, 52, 29, 39, 46, 72, 38, 67, 49, 38, 30, 37, 39, 37, 48, 36, 22, 30, 32, 33, 28, 38, 25, 39, 14, 31, 32, 0, 77, 20, 16, 20, 2, 53, 39, 23, 30, 21, 8, 17, 0, 53, 24, 11, 37, 35, 24, 0, 0, 47, 17, 19, 5, 14, 13, 15, 14, 2, 16, 13, 11, 14, 24, 20, 10, 11, 13, 11, 30, 15, 9, 9, 18, 10, 23, 0, 18, 4, 10, 4, 30, 3, 26, 20, 18, 1]
SN=[0, 167, 48, 91, 56, 136, 0, 0, 234, 64, 0, 166, 133, 0, 0, 230, 129, 73, 130, 58, 0, 0, 396, 179, 112, 0, 0, 8, 208, 396, 83, 226, 162, 294, 0, 0, 334, 203, 173, 410, 200, 0, 15, 986, 163, 372, 444, 295, 0, 196, 1020, 344, 276, 486, 0, 0, 198, 990, 208, 282, 203, 0, 182, 412, 1148, 270, 297, 335, 377, 0, 0, 1082, 240, 335, 402, 363, 0, 78, 484, 590, 177, 208, 303, 0, 0, 547, 100, 176, 169, 220, 0, 0, 485, 99, 120, 101, 175, 0, 0, 308, 46, 132, 79, 0, 0, 0, 0, 329, 63, 47, 76, 0, 0, 93, 23, 43, 43, 56, 0, 0, 91, 48, 53, 46, 43, 0, 0, 99, 21, 28, 35, 29, 0, 0, 64, 43, 46, 40, 35, 0, 0, 89, 31, 42, 44, 58, 0, 0, 112, 44, 24, 51, 61, 0, 0, 100, 31, 30, 27, 38, 0, 0, 146, 29, 32, 70, 71, 0, 0, 152, 20, 39, 40, 0, 0, 0, 187, 32, 21, 46, 65, 0, 0, 111, 25, 29, 56, 54, 0, 0, 112, 16, 32, 41, 21, 0, 0, 37, 15, 60, 25, 11, 0, 0, 61]
def draw():

	def update():
		with open('us-counties.csv', 'r') as f:
			data=f.read().split('\n')
			date='2021'
			for e in data:
				if e.split(',')[2]=='California':
					
					if e[:10]!=date:
						sleep(0.04)
						for cc in c:
							route.delete(cc)
						date=e[:10]
						c.append(route.create_text(880,30,text=e[:10],font=('Arial', 26)))

					l=e.split(',')
					if l[1]=='San Francisco':
						n=int(l[4])-cumu['SF']
						SF.append(n)
						r=20+n*50/500
						c.append(route.create_oval(360-r,550-r,360+r,550+r,fill='green',width=3))
						c.append(route.create_text(360,550,text=int(l[4])-cumu['SF'],font=('Arial', 20)))
						cumu['SF']=int(l[4])	
										
					if l[1]=='San Mateo':
						n=int(l[4])-cumu['SM']
						SM.append(n)
						r=20+n*50/500
						c.append(route.create_oval(523-r,680-r,523+r,680+r,fill='green',width=3))
						c.append(route.create_text(523,680,text=int(l[4])-cumu['SM'],font=('Arial', 20)))
						cumu['SM']=int(l[4])
					
					if l[1]=='Santa Cruz':
						n=int(l[4])-cumu['SCz']
						SCz.append(n)
						r=20+n*50/500
						c.append(route.create_oval(595-r,835-r,595+r,835+r,fill='green',width=3))
						c.append(route.create_text(595,835,text=int(l[4])-cumu['SCz'],font=('Arial', 20)))
						cumu['SCz']=int(l[4])

					if l[1]=='Santa Clara':
						n=int(l[4])-cumu['SC']
						SC.append(n)
						r=20+n*50/500
						c.append(route.create_oval(700-r,750-r,700+r,750+r,fill='green',width=3))
						c.append(route.create_text(700,750,text=int(l[4])-cumu['SC'],font=('Arial', 20)))
						cumu['SC']=int(l[4])

					if l[1]=='Alameda':
						n=int(l[4])-cumu['A']
						A.append(n)
						r=20+n*50/500
						c.append(route.create_oval(670-r,600-r,670+r,600+r,fill='green',width=3))
						c.append(route.create_text(670,600,text=int(l[4])-cumu['A'],font=('Arial', 20)))
						cumu['A']=int(l[4])

					if l[1]=='Marin':
						n=int(l[4])-cumu['M']
						M.append(n)
						r=20+n*50/500
						c.append(route.create_oval(390-r,410-r,390+r,410+r,fill='green',width=3))
						c.append(route.create_text(390,410,text=int(l[4])-cumu['M'],font=('Arial', 20)))
						cumu['M']=int(l[4])

					if l[1]=='Contra Costa':
						n=int(l[4])-cumu['CC']
						CC.append(n)
						r=20+n*50/500
						c.append(route.create_oval(660-r,490-r,660+r,490+r,fill='green',width=3))
						c.append(route.create_text(660,490,text=int(l[4])-cumu['CC'],font=('Arial', 20)))
						cumu['CC']=int(l[4])

					if l[1]=='Napa':
						n=int(l[4])-cumu['N']
						N.append(n)
						r=20+n*50/500
						c.append(route.create_oval(510-r,215-r,510+r,215+r,fill='green',width=3))
						c.append(route.create_text(510,215,text=int(l[4])-cumu['N'],font=('Arial', 20)))
						cumu['N']=int(l[4])

					if l[1]=='Sonoma':
						n=int(l[4])-cumu['S']
						S.append(n)
						r=20+n*50/500
						c.append(route.create_oval(305-r,190-r,305+r,190+r,fill='green',width=3))
						c.append(route.create_text(305,190,text=int(l[4])-cumu['S'],font=('Arial', 20)))
						cumu['S']=int(l[4])
						
					if l[1]=='Solano':
						n=int(l[4])-cumu['SN']
						SN.append(n)
						r=20+n*50/500
						c.append(route.create_oval(660-r,330-r,660+r,330+r,fill='green',width=3))
						c.append(route.create_text(660,330,text=int(l[4])-cumu['SN'],font=('Arial', 20)))
						cumu['SN']=int(l[4])
		print('SF:',SF)
		print('SM:',SM)
		print('SCz:',SCz)
		print('SC:',SC)
		print('A:',A)
		print('M:',M)
		print('CC:',CC)
		print('N:',N)
		print('S:',S)
		print('SN:',SN)

	root=Tk()
	route=Canvas(root,width=1000, height=900)
	route.pack()

	bay=PhotoImage(file = 'bay.png')
	route.create_image(500,450, image = bay)
	Thread(target=update).start()
	root.mainloop()

draw()
'''train_x=list()
train_y=list()

for i in range(205-1):
	buf=list()
	buf.append(SF[i])
	buf.append(SM[i])
	buf.append(SCz[i])
	buf.append(SC[i])
	buf.append(A[i])
	buf.append(M[i])
	buf.append(CC[i])
	buf.append(N[i])
	buf.append(S[i])
	buf.append(SN[i])
	train_x.append(buf)
	
	buf=list()
	buf.append(SF[i+1])
	buf.append(SM[i+1])
	buf.append(SCz[i+1])
	buf.append(SC[i+1])
	buf.append(A[i+1])
	buf.append(M[i+1])
	buf.append(CC[i+1])
	buf.append(N[i+1])
	buf.append(S[i+1])
	buf.append(SN[i+1])
	train_y.append(buf)

train_x.pop(0)
train_y.pop(0)

DNN = Sequential()
DNN.add(Dense(64, input_shape=(10,)) )
DNN.add(Dense(64, activation="relu"))
DNN.add(Dense(10,))
DNN.compile(loss='mae', optimizer='adam', metrics=['mae'])
DNN.fit([train_x], [train_y], epochs=1000, batch_size=100)

predict=list()
for i in range(202):
	predict.append(DNN.predict(np.array([train_x[i]]))[0][3])

future=DNN.predict(np.array([train_x[202]]))[0]

for i in range(60):
	future=DNN.predict(np.array([future]))[0]
	predict.append(future[3])

#plt.plot(SC,label='SC')
plt.plot(predict,"go-",label='DNN')
plt.legend()
plt.show()'''